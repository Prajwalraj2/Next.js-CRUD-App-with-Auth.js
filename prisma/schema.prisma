// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

model Product {
  id          Int           @id @default(autoincrement())
  title       String
  price       Int           // store paise; UI shows ₹
  description String?
  status      ProductStatus @default(ACTIVE)

  ownerId     String            // ← NEW: FK
  owner       User   @relation(fields: [ownerId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}


enum Role {
  USER
  ADMIN
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  // For Credentials sign-in:
  passwordHash  String?

  accounts      Account[]
  products      Product[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

// ----- V5: Resource module & item types -----
// ---------- v5: Content hierarchy ----------

enum ResourceModuleKind {
  MIXED
  TABLE
  CONTENT
}

enum ResourceBlockType {
  TEXT
  CARD
  COLLAPSIBLE
  VIDEO
  IMAGE
  LINKLIST
}

enum TableColumnType {
  TEXT
  BADGE
  LINK
  DESC
}

model Domain {
  id           String         @id @default(cuid())
  name         String
  slug         String         @unique
  order        Int            @default(0)
  isPublic     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  subCategories SubCategory[]
}

model SubCategory {
  id         String     @id @default(cuid())
  domainId   String
  domain     Domain     @relation(fields: [domainId], references: [id], onDelete: Cascade)
  name       String
  slug       String
  order      Int        @default(0)
  isPublic   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  modules    ResourceModule[]

  @@unique([domainId, slug])
  @@index([domainId, order])
}

model ResourceModule {
  id            String              @id @default(cuid())
  subCategoryId String
  subCategory   SubCategory         @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  title         String
  slug          String
  summary       String?
  kind          ResourceModuleKind  @default(MIXED)
  order         Int                 @default(0)
  isPublic      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  blocks        ResourceBlock[]
  table         ResourceTable?

  @@unique([subCategoryId, slug])
  @@index([subCategoryId, order])
}

model ResourceBlock {
  id        String            @id @default(cuid())
  moduleId  String
  module    ResourceModule    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  type      ResourceBlockType
  order     Int               @default(0)
  data      Json
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([moduleId, order])
}

model ResourceTable {
  id        String         @id @default(cuid())
  moduleId  String         @unique
  module    ResourceModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  columns   Json           // [{key,label,type,visible?,width?}]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  rows      ResourceTableRow[]
}

model ResourceTableRow {
  id        String         @id @default(cuid())
  tableId   String
  table     ResourceTable  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  order     Int            @default(0)
  data      Json           // { [key]: string | {label,href} | ... }
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([tableId, order])
}


